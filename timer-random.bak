(define (random-generator timer . dontrun)
  (define (resume)
    (timer.stop TIMER0) ; safety measure (to not mess up possible already running timers)
    (timer.set-PR TIMER0 0)
    (timer.MR-control-over TIMER0 0 0 1 0)
    (timer.set-MR TIMER0 TxMR0 100000)
    (timer.reset-n-start TIMER0))
  (define (pause)
    (timer.stop TIMER0))
  (define (get min max)
    (+ min (* (- max min)
              (/ (timer.value TIMER0)
                 100000))))
  (define (random-generator-object msg . args)
    (let ((my-param (make-param 'random-generator-object)))
      (case msg
        ('sick? (eq? (my-fsm 'get-current-state) state-sick))
        ('healthy? (eq? (my-fsm 'get-current-state) state-healthy))
        ('healing? (eq? (my-fsm 'get-current-state) state-healing))
        ('refused? (eq? (my-fsm 'get-current-state) state-refused))
        ('dead? (eq? (my-fsm 'get-current-state) state-dead))
        ('sicken! (sickness-level 'raise!))
        (else (error 'random-generator-object "message \"~S\" unknown" msg)))))