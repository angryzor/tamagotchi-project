(define bootseq '())

(define (load-boot)
  (let ((f (open-input-file "boot")))
    (define (load-iter res)
      (let ((t (read f)))
        (if (eof-object? t)
            (set! bootseq (reverse res))
            (load-iter (cons t res)))))
    (if (not (zero? f))
        (begin
          (load-iter '())
          (close-input-port f)))))

(define (save-boot)
  (erase)
  (let ((f (open-output-file "boot")))
    (define (save-iter lst)
      (if (null? lst)
          (close-output-port f)
          (begin
            (write (car lst) f)
            (save-iter (cdr lst)))))
    (if (not (zero? f))
        (save-iter bootseq))))

(define (edit lst)
  (define (iter)
    (display lst)
    (newline)
    (let ((a (read)))
      (case a
        ('in (display "n to go into:")
             (newline)
             (edit (nth lst (read)))
             (iter))
        ('out 'out)
        ('connect! (display "n to connect:")
                   (newline)
                   (let* ((n (read))
                          (crest (fromn lst n)))
                     (display "val to connect:")
                     (newline)
                     (connect! lst n (eval (read)))
                     (iter)))
        ('set! (display "n to connect:")
               (newline)
               (let ((n (read)))
                 (display "val to connect:")
                 (newline)
                 (set-nth! lst n (eval (read)))
                 (iter)))
        (else (iter)))))
  (iter))


(define (nth lst i)
  (if (= i 0)
      (car lst)
      (nth (cdr lst) (- i 1))))

(define (fromn lst i)
  (if (= i 0)
      lst
      (fromn (cdr lst) (- i 1))))

(define (set-nth! lst i val)
  (if (= i 0)
      (set-car! lst val)
      (set-nth! (cdr lst) (- i 1) val)))

(define (connect! lst i val)
  (if (= i 1)
      (set-cdr! lst val)
      (connect! (cdr lst) (- i 1) val)))

(let ((bootport (open-input-file "boot")))
  (define (iter)
    (let ((t (read bootport)))
      (if (not (eof-object? t))
          (begin
            (eval t (interaction-environment))
            (iter)))))
  (if (not (zero? bootport))
      (begin
        (iter)
        (close-input-port bootport))))
